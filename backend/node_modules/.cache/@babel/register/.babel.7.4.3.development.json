{
  "{\"sourceRoot\":\"/Users/lukeolsen/Desktop/task-board/backend\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/lukeolsen/Desktop/task-board/backend\",\"filename\":\"/Users/lukeolsen/Desktop/task-board/backend/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/lukeolsen/Desktop/task-board/backend\",\"plugins\":[],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/lukeolsen/Desktop/task-board/backend",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/lukeolsen/Desktop/task-board/backend",
      "filename": "/Users/lukeolsen/Desktop/task-board/backend/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/lukeolsen/Desktop/task-board/backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/lukeolsen/Desktop/task-board/backend/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/lukeolsen/Desktop/task-board/backend/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/lukeolsen/Desktop/task-board/backend",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst helmet = require('helmet');\n\nconst app = express();\napp.use(helmet());\n\nconst bodyParser = require('body-parser');\n\nconst cors = require('cors');\n\nconst mongoose = require('Mongoose');\n\nconst PORT = 4000;\nconst userRoutes = express.Router();\nconst dataRoutes = express.Router();\n\nconst MongoClient = require('mongodb').MongoClient;\n\nimport Data from './initialData.js';\n\nrequire('dotenv').config();\n\napp.use(cors());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(bodyParser.json());\nconst client = new MongoClient(process.env.DB_ROUTE, {\n  useNewUrlParser: true\n});\nclient.connect(err => {\n  const db = client.db(process.env.DB_NAME);\n  const user = db.collection('User');\n  console.log(\"connected to DB\");\n  app.get('/', function (req, res) {\n    console.log(\"WELCOME!\");\n    res.json({\n      \"type\": \"you did it\"\n    });\n  });\n  dataRoutes.route('/first').post(function (req, res) {\n    let initialData = Data;\n    db.collection('Data').save(initialData).then(data => {\n      res.status(200).json({\n        \"data\": \"data added successfully\"\n      });\n    }).catch(err => {\n      res.status(400).send('adding new data failed');\n    });\n  });\n  userRoutes.route('/add').post(function (req, res) {\n    console.log(req.body);\n    user.insertOne(req.body).then(data => {\n      res.status(200).json({\n        'user': 'user added successfully!'\n      });\n    }).catch(err => {\n      res.status(400).send('adding new data failed');\n    });\n  });\n  userRoutes.route('/').get(function (req, res, next) {\n    user.find({}).toArray(function (error, users) {\n      if (err) throw error;\n      res.send(users);\n    });\n  });\n  app.use('/user', userRoutes);\n  app.use('/data', dataRoutes);\n  app.listen(PORT, function () {\n    console.log(\"Server is running on Port: \" + PORT);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImhlbG1ldCIsImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJjb3JzIiwibW9uZ29vc2UiLCJQT1JUIiwidXNlclJvdXRlcyIsIlJvdXRlciIsImRhdGFSb3V0ZXMiLCJNb25nb0NsaWVudCIsIkRhdGEiLCJjb25maWciLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwiY2xpZW50IiwicHJvY2VzcyIsImVudiIsIkRCX1JPVVRFIiwidXNlTmV3VXJsUGFyc2VyIiwiY29ubmVjdCIsImVyciIsImRiIiwiREJfTkFNRSIsInVzZXIiLCJjb2xsZWN0aW9uIiwiY29uc29sZSIsImxvZyIsImdldCIsInJlcSIsInJlcyIsInJvdXRlIiwicG9zdCIsImluaXRpYWxEYXRhIiwic2F2ZSIsInRoZW4iLCJkYXRhIiwic3RhdHVzIiwiY2F0Y2giLCJzZW5kIiwiYm9keSIsImluc2VydE9uZSIsIm5leHQiLCJmaW5kIiwidG9BcnJheSIsImVycm9yIiwidXNlcnMiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxNQUFNRSxHQUFHLEdBQUdILE9BQU8sRUFBbkI7QUFDQUcsR0FBRyxDQUFDQyxHQUFKLENBQVFGLE1BQU0sRUFBZDs7QUFDQSxNQUFNRyxVQUFVLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQTFCOztBQUNBLE1BQU1LLElBQUksR0FBR0wsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTU0sUUFBUSxHQUFHTixPQUFPLENBQUMsVUFBRCxDQUF4Qjs7QUFDQSxNQUFNTyxJQUFJLEdBQUcsSUFBYjtBQUNBLE1BQU1DLFVBQVUsR0FBR1QsT0FBTyxDQUFDVSxNQUFSLEVBQW5CO0FBQ0EsTUFBTUMsVUFBVSxHQUFHWCxP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LEVBQVYsRUFBY0MsT0FBZCxDQUFzQixVQUFTQyxLQUFULEVBQWdCQyxLQUFoQixFQUF1QjtBQUN6QyxVQUFJekIsR0FBSixFQUFTLE1BQU13QixLQUFOO0FBRVRmLE1BQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTTyxLQUFUO0FBQ0gsS0FKRDtBQUtILEdBTkQ7QUFRQTlDLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLE9BQVIsRUFBaUJLLFVBQWpCO0FBQ0FOLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLE9BQVIsRUFBaUJPLFVBQWpCO0FBRUFSLEVBQUFBLEdBQUcsQ0FBQytDLE1BQUosQ0FBVzFDLElBQVgsRUFBaUIsWUFBVztBQUN4QnFCLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGdDQUFnQ3RCLElBQTVDO0FBQ0gsR0FGRDtBQUdILENBaEREIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9sdWtlb2xzZW4vRGVza3RvcC90YXNrLWJvYXJkL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgaGVsbWV0ID0gcmVxdWlyZSgnaGVsbWV0JylcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UoaGVsbWV0KCkpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5jb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdNb25nb29zZScpO1xuY29uc3QgUE9SVCA9IDQwMDA7XG5jb25zdCB1c2VyUm91dGVzID0gZXhwcmVzcy5Sb3V0ZXIoKTtcbmNvbnN0IGRhdGFSb3V0ZXMgPSBleHByZXNzLlJvdXRlcigpO1xuY29uc3QgTW9uZ29DbGllbnQgPSByZXF1aXJlKCdtb25nb2RiJykuTW9uZ29DbGllbnQ7XG5pbXBvcnQgRGF0YSBmcm9tICcuL2luaXRpYWxEYXRhLmpzJztcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXG5cblxuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5jb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQocHJvY2Vzcy5lbnYuREJfUk9VVEUsIHt1c2VOZXdVcmxQYXJzZXI6IHRydWV9KVxuXG5jbGllbnQuY29ubmVjdChlcnIgPT4ge1xuICAgIGNvbnN0IGRiID0gY2xpZW50LmRiKHByb2Nlc3MuZW52LkRCX05BTUUpXG4gICAgY29uc3QgdXNlciA9IGRiLmNvbGxlY3Rpb24oJ1VzZXInKVxuICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkIHRvIERCXCIpXG5cblxuICAgIGFwcC5nZXQoJy8nLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIldFTENPTUUhXCIpXG4gICAgICAgIHJlcy5qc29uKHtcInR5cGVcIjogXCJ5b3UgZGlkIGl0XCJ9KVxuICAgIH0pXG5cbiAgICBkYXRhUm91dGVzLnJvdXRlKCcvZmlyc3QnKS5wb3N0KGZ1bmN0aW9uKHJlcSwgcmVzKXtcbiAgICAgICAgbGV0IGluaXRpYWxEYXRhID0gRGF0YTtcbiAgICAgICAgZGIuY29sbGVjdGlvbignRGF0YScpLnNhdmUoaW5pdGlhbERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1wiZGF0YVwiOiBcImRhdGEgYWRkZWQgc3VjY2Vzc2Z1bGx5XCJ9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKCdhZGRpbmcgbmV3IGRhdGEgZmFpbGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICB9KTtcbiAgICBcbiAgICB1c2VyUm91dGVzLnJvdXRlKCcvYWRkJykucG9zdChmdW5jdGlvbihyZXEsIHJlcykge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXEuYm9keSk7XG4gICAgICAgIFxuICAgICAgICB1c2VyLmluc2VydE9uZShyZXEuYm9keSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsndXNlcic6ICd1c2VyIGFkZGVkIHN1Y2Nlc3NmdWxseSEnfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwMCkuc2VuZCgnYWRkaW5nIG5ldyBkYXRhIGZhaWxlZCcpO1xuICAgICAgICAgICAgfSlcbiAgICB9KVxuICAgIFxuICAgIHVzZXJSb3V0ZXMucm91dGUoJy8nKS5nZXQoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgdXNlci5maW5kKHt9KS50b0FycmF5KGZ1bmN0aW9uKGVycm9yLCB1c2Vycykge1xuICAgICAgICAgICAgaWYgKGVycikgdGhyb3cgZXJyb3I7XG4gICAgICAgIFxuICAgICAgICAgICAgcmVzLnNlbmQodXNlcnMpO1xuICAgICAgICB9KTtcbiAgICB9KVxuICAgIFxuICAgIGFwcC51c2UoJy91c2VyJywgdXNlclJvdXRlcyk7XG4gICAgYXBwLnVzZSgnL2RhdGEnLCBkYXRhUm91dGVzKTtcbiAgICBcbiAgICBhcHAubGlzdGVuKFBPUlQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZlciBpcyBydW5uaW5nIG9uIFBvcnQ6IFwiICsgUE9SVCk7XG4gICAgfSk7XG59KVxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "helmet",
        "app",
        "use",
        "bodyParser",
        "cors",
        "mongoose",
        "PORT",
        "userRoutes",
        "Router",
        "dataRoutes",
        "MongoClient",
        "Data",
        "config",
        "urlencoded",
        "extended",
        "json",
        "client",
        "process",
        "env",
        "DB_ROUTE",
        "useNewUrlParser",
        "connect",
        "err",
        "db",
        "DB_NAME",
        "user",
        "collection",
        "console",
        "log",
        "get",
        "req",
        "res",
        "route",
        "post",
        "initialData",
        "save",
        "then",
        "data",
        "status",
        "catch",
        "send",
        "body",
        "insertOne",
        "next",
        "find",
        "toArray",
        "error",
        "users",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/lukeolsen/Desktop/task-board/backend",
      "sourcesContent": [
        "const express = require('express');\nconst helmet = require('helmet')\nconst app = express();\napp.use(helmet());\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst mongoose = require('Mongoose');\nconst PORT = 4000;\nconst userRoutes = express.Router();\nconst dataRoutes = express.Router();\nconst MongoClient = require('mongodb').MongoClient;\nimport Data from './initialData.js';\nrequire('dotenv').config()\n\n\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\nconst client = new MongoClient(process.env.DB_ROUTE, {useNewUrlParser: true})\n\nclient.connect(err => {\n    const db = client.db(process.env.DB_NAME)\n    const user = db.collection('User')\n    console.log(\"connected to DB\")\n\n\n    app.get('/', function(req, res) {\n        console.log(\"WELCOME!\")\n        res.json({\"type\": \"you did it\"})\n    })\n\n    dataRoutes.route('/first').post(function(req, res){\n        let initialData = Data;\n        db.collection('Data').save(initialData)\n                             .then(data => {\n                                 res.status(200).json({\"data\": \"data added successfully\"})\n                             })\n                             .catch(err => {\n                                 res.status(400).send('adding new data failed')\n                             })\n    });\n    \n    userRoutes.route('/add').post(function(req, res) {\n        console.log(req.body);\n        \n        user.insertOne(req.body)\n            .then(data => {\n                res.status(200).json({'user': 'user added successfully!'})\n            })\n            .catch(err => {\n                res.status(400).send('adding new data failed');\n            })\n    })\n    \n    userRoutes.route('/').get(function(req, res, next) {\n        user.find({}).toArray(function(error, users) {\n            if (err) throw error;\n        \n            res.send(users);\n        });\n    })\n    \n    app.use('/user', userRoutes);\n    app.use('/data', dataRoutes);\n    \n    app.listen(PORT, function() {\n        console.log(\"Server is running on Port: \" + PORT);\n    });\n})\n\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1555027602023
  }
}